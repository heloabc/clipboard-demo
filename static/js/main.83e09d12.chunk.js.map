{"version":3,"sources":["demo1.jsx","hooks.js","demo3.jsx","App.js","demo2.jsx","demo4.jsx","serviceWorker.js","index.js"],"names":["blockStyle","margin","padding","border","whiteSpace","wordBreak","readDataTransferItemAsString","item","Promise","resolve","getAsString","data","a","items","result","all","map","console","log","type","kind","getAsFile","getClipboardData","useClipboardState","initData","useState","setData","useEffect","handlePaste","e","clipboardData","d","JSON","parse","handleCopy","preventDefault","clearData","stringify","document","addEventListener","removeEventListener","uniqId","demos","c","clipInfo","setClipInfo","then","style","src","URL","createObjectURL","alt","name","setResult","cursor","onClick","msg","Math","random","toString","slice","Date","toISOString","execCommand","fontSize","key","createdAt","length","App","current","setActive","onChange","x","display","i","color","bind","undefined","React","createElement","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.83e09d12.chunk.js","sourcesContent":["import React from 'react';\nimport { useState } from 'react';\nimport { useEffect } from 'react';\n\nconst blockStyle = {\n  margin: '0 10px 10px 10px',\n  padding: 8,\n  border: '1px solid gray',\n  whiteSpace: 'pre-wrap',\n  wordBreak: 'break-all'\n}\n\nfunction readDataTransferItemAsString(item) {\n  return new Promise(function (resolve) {\n    item.getAsString(resolve);\n  })\n}\n\nasync function getClipboardData(data) {\n  const { items } = data;\n  const result = {};\n  await Promise.all([...items].map(async item => {\n    console.log(item)\n    const { type, kind } = item;\n    if (kind === 'string') {\n      result[type] = await readDataTransferItemAsString(item);\n    } else if (kind === 'file') {\n      result[type] = item.getAsFile();\n    }\n  }))\n  console.log(result)\n  return result;\n}\n\nexport default function Demo1() {\n  const [clipInfo, setClipInfo] = useState({});\n  useEffect(function () {\n    function handlePaste(e) {\n      getClipboardData(e.clipboardData).then(setClipInfo)\n    }\n    function handleCopy(e) {\n      e.preventDefault()\n      const { clipboardData } = e\n      clipboardData.clearData();\n      clipboardData.setData('text/plain', '版权保护中')\n    }\n    document.addEventListener('copy', handleCopy)\n    document.addEventListener('paste', handlePaste);\n    return function () {\n      document.removeEventListener('paste', handlePaste);\n      document.removeEventListener('copy', handleCopy)\n    }\n  }, [])\n  return <div>\n    <h1>复制任意资源并粘贴：</h1>\n    <h3>text/plain</h3>\n    <pre style={blockStyle}>{clipInfo['text/plain']}</pre>\n    <h3>image</h3>\n    <div style={blockStyle}>\n      {\n        clipInfo['image/png'] &&\n        <img src={URL.createObjectURL(clipInfo['image/png'])} alt=\"\" />\n      }\n    </div>\n    <h3>text/html</h3>\n    <pre style={blockStyle}>{clipInfo['text/html']}</pre>\n    <h3>text/rtf</h3>\n    <pre style={blockStyle}>{clipInfo['text/rtf']}</pre>\n  </div>\n}\n\n","import { useState, useEffect } from 'react';\n\nfunction readDataTransferItemAsString(item) {\n  return new Promise(function (resolve) {\n    item.getAsString(resolve);\n  })\n}\n\nasync function getClipboardData(data) {\n  const { items } = data;\n  const result = {};\n  await Promise.all([...items].map(async item => {\n    console.log(item)\n    const { type, kind } = item;\n    if (kind === 'string') {\n      result[type] = await readDataTransferItemAsString(item);\n    } else if (kind === 'file') {\n      result[type] = item.getAsFile();\n    }\n  }))\n  console.log(result)\n  return result;\n}\n\nexport function useClipboardState(initData) {\n  const [data, setData] = useState(initData);\n  useEffect(function () {\n    async function handlePaste(e) {\n      const d = await getClipboardData(e.clipboardData);\n      if (d && d['text/custom']) {\n        try {\n          setData(JSON.parse(d['text/custom']))\n        } catch (e) {\n          console.log('paste failed.')\n        }\n      }\n    }\n    function handleCopy(e) {\n      e.preventDefault()\n      const { clipboardData } = e\n      clipboardData.clearData();\n      clipboardData.setData('text/custom', JSON.stringify(data))\n    }\n    document.addEventListener('copy', handleCopy)\n    document.addEventListener('paste', handlePaste);\n    return function () {\n      document.removeEventListener('paste', handlePaste);\n      document.removeEventListener('copy', handleCopy)\n    }\n  }, [data]);\n  return [data, setData]\n}","import React from 'react';\nimport { useClipboardState } from './hooks';\n\nlet uniqId = 0;\n\nexport default function Demo3() {\n  const [data, setData] = useClipboardState([])\n  function hanldeAdd() {\n    setData([...data, { key: ++uniqId, createdAt: new Date().toISOString() }])\n  }\n  return <div>\n    <h1>在此复制，到Demo4粘贴</h1>\n    <span style={{ cursor: 'pointer', padding: '0 10px', fontSize: 22, border: '1px solid' }} onClick={hanldeAdd}>add item</span>\n    <div style={{ margin: 10 }}>\n      {data.map(d => <div key={d.key} >{JSON.stringify(d)}</div>)}\n    </div>\n  </div>\n}","import React, { useState } from 'react';\nimport Demo1 from './demo1';\nimport Demo2 from './demo2';\nimport Demo3 from './demo3';\nimport Demo4 from './demo4';\n\nconst demos = [{ c: Demo1, name: 'Demo1' }, { c: Demo2, name: 'Demo2' }, { c: Demo3, name: 'Demo3' }, { c: Demo4, name: 'Demo4' }]\n\nfunction App() {\n  const [current, setActive] = useState(0);\n  function onChange(x) {\n    setActive(x);\n  }\n  return (\n    <div>\n      <div style={{ display: 'flex' }}>\n        {demos.map((x, i) => <div\n          key={x.name}\n          style={{\n            cursor: 'pointer',\n            border: '1px solid',\n            margin: 10,\n            padding: 10,\n            color: current === i ? 'red' : 'black',\n          }}\n          onClick={onChange.bind(undefined, i)}>\n          {x.name}\n        </div>\n        )}\n      </div>\n      {demos[current] && React.createElement(demos[current].c)}\n    </div>\n  );\n}\n\nexport default App;\n","import React, { useState } from 'react';\n\nexport default function Demo2() {\n  const [result, setResult] = useState()\n  function handleClick(e) {\n    function handleCopy(e) {\n      e.preventDefault()\n      const { clipboardData } = e\n      clipboardData.clearData();\n      const msg = `code: ${Math.random().toString().slice(2, 10)}\\ncopied at: ${new Date().toISOString()}`;\n      clipboardData.setData('text/plain', msg);\n      document.removeEventListener('copy', handleCopy);\n      setResult(msg)\n    }\n    document.addEventListener('copy', handleCopy)\n    document.execCommand('copy');\n  }\n  return <div>\n    <div style={{ cursor: 'pointer', margin: 30, padding: 30 }} onClick={handleClick}>点击复制口令</div>\n    <pre style={{ border: '1px solid', margin: 30, padding: 30 }}>{result}</pre>\n  </div>\n}\n","import React from 'react';\nimport { useClipboardState } from './hooks';\n\n\nexport default function Demo4() {\n  const [data, setData] = useClipboardState([])\n  function hanldeDel() {\n    if (data.length) {\n      setData(data.slice(0, data.length - 1))\n    }\n  }\n  return <div>\n    <h1>在此复制，到Demo3粘贴</h1>\n    <span style={{ cursor: 'pointer', padding: '0 10px', fontSize: 22, border: '1px solid' }} onClick={hanldeDel}>remove item</span>\n    <div style={{ margin: 10 }}>\n      {data.map(d => <div key={d.key} >{JSON.stringify(d)}</div>)}\n    </div>\n  </div>\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App></App>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}